// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: transaction.queries.sql

package sqlc

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createTransaction = `-- name: CreateTransaction :exec
INSERT INTO
  "transaction" (id, user_id, value, operation, status)
VALUES
($1, $2, $3, $4, $5)
`

type CreateTransactionParams struct {
	ID        uuid.UUID
	UserID    uuid.UUID
	Value     string
	Operation sql.NullString
	Status    string
}

func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) error {
	_, err := q.db.ExecContext(ctx, createTransaction,
		arg.ID,
		arg.UserID,
		arg.Value,
		arg.Operation,
		arg.Status,
	)
	return err
}

const getTransactionByUserID = `-- name: GetTransactionByUserID :many
SELECT
  id, user_id, value, operation, status, created_at, updated_at
FROM
  "transaction"
WHERE
  user_id = $1
`

func (q *Queries) GetTransactionByUserID(ctx context.Context, userID uuid.UUID) ([]Transaction, error) {
	rows, err := q.db.QueryContext(ctx, getTransactionByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transaction
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Value,
			&i.Operation,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
