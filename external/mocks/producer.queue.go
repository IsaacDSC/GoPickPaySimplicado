// Code generated by MockGen. DO NOT EDIT.
// Source: ./external/configs/queue/producer.queue.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockIProducerQueue is a mock of IProducerQueue interface.
type MockIProducerQueue struct {
	ctrl     *gomock.Controller
	recorder *MockIProducerQueueMockRecorder
}

// MockIProducerQueueMockRecorder is the mock recorder for MockIProducerQueue.
type MockIProducerQueueMockRecorder struct {
	mock *MockIProducerQueue
}

// NewMockIProducerQueue creates a new mock instance.
func NewMockIProducerQueue(ctrl *gomock.Controller) *MockIProducerQueue {
	mock := &MockIProducerQueue{ctrl: ctrl}
	mock.recorder = &MockIProducerQueueMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIProducerQueue) EXPECT() *MockIProducerQueueMockRecorder {
	return m.recorder
}

// TransactionNotificationMailer mocks base method.
func (m *MockIProducerQueue) TransactionNotificationMailer(transactionID uuid.UUID, operation, mailer string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "TransactionNotificationMailer", transactionID, operation, mailer)
}

// TransactionNotificationMailer indicates an expected call of TransactionNotificationMailer.
func (mr *MockIProducerQueueMockRecorder) TransactionNotificationMailer(transactionID, operation, mailer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransactionNotificationMailer", reflect.TypeOf((*MockIProducerQueue)(nil).TransactionNotificationMailer), transactionID, operation, mailer)
}
