// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/infra/contracts/notificationMailer.contract.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockNotificationMailerInterface is a mock of NotificationMailerInterface interface.
type MockNotificationMailerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockNotificationMailerInterfaceMockRecorder
}

// MockNotificationMailerInterfaceMockRecorder is the mock recorder for MockNotificationMailerInterface.
type MockNotificationMailerInterfaceMockRecorder struct {
	mock *MockNotificationMailerInterface
}

// NewMockNotificationMailerInterface creates a new mock instance.
func NewMockNotificationMailerInterface(ctrl *gomock.Controller) *MockNotificationMailerInterface {
	mock := &MockNotificationMailerInterface{ctrl: ctrl}
	mock.recorder = &MockNotificationMailerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotificationMailerInterface) EXPECT() *MockNotificationMailerInterfaceMockRecorder {
	return m.recorder
}

// SentMailer mocks base method.
func (m *MockNotificationMailerInterface) SentMailer(mailer string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SentMailer", mailer)
	ret0, _ := ret[0].(error)
	return ret0
}

// SentMailer indicates an expected call of SentMailer.
func (mr *MockNotificationMailerInterfaceMockRecorder) SentMailer(mailer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SentMailer", reflect.TypeOf((*MockNotificationMailerInterface)(nil).SentMailer), mailer)
}
